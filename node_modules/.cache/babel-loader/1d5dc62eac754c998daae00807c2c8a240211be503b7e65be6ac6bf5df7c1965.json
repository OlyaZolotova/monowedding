{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { postData } from \"../services/sendDataForm\";\nconst TOKEN = \"6427393697:AAFM6wFXAv7O-5jLKH85LGkWSATFMZgNS_8\"; // токен от BotFather\nconst CHAT_ID = \"-1002144356202\"; // chat_id для телеграм\n\nexport const useContactForm = () => {\n  _s();\n  const uriRequest = \"https://api.telegram.org/bot\" + TOKEN + \"/sendMessage\";\n  const [formData, setFormData] = useState({\n    user_name: \"\",\n    selected_drinks: [],\n    attending_wedding: \"\",\n    transfer: \"\"\n  });\n  const [isSending, setSending] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [sendError, setSendError] = useState(false);\n  const onSubmissingForm = function (e) {\n    e.preventDefault();\n    if (formData.user_name !== \"\" && formData.selected_drinks.length > 0 && formData.attending_wedding !== \"\" && formData.transfer !== \"\") {\n      setSending(true);\n      postData(uriRequest, JSON.stringify(formData)).then(res => {\n        setSuccess(true);\n        console.log(res);\n        sendMsg(formData);\n        setSendError(false); // Сбросить ошибку отправки\n      }).catch(e => {\n        setError(true); // Ошибка заполнения всех полей\n        setSendError(true); // Ошибка отправки формы\n        console.error(e);\n      }).finally(() => {\n        setFormData({\n          user_name: \"\",\n          selected_drinks: [],\n          attending_wedding: \"\",\n          transfer: \"\"\n        });\n        setSending(false);\n        setTimeout(() => {\n          setSuccess(false);\n          setError(false);\n          setSendError(false);\n        }, 5000);\n        const closeButton = document.getElementById(\"closebtn\");\n        if (closeButton !== null) {\n          // Выполнить операции с closeButton\n          // Например, добавить обработчик события\n          closeButton.addEventListener(\"click\", function () {\n            setSuccess(false);\n            setSendError(false);\n          });\n        } else {\n          // В случае, если closeButton равен null\n          console.error(\"Button not found\");\n        }\n        document.addEventListener(\"click\", e => {\n          const withinBoundaries = e.target.closest(\"#message\"); // Проверяем, что клик был внутри сообщения\n\n          if (!withinBoundaries) {\n            setSuccess(false);\n            setSendError(false);\n          }\n        });\n      });\n    } else {\n      setError(true);\n      console.error(\"Ошибка: не все поля формы заполнены\");\n    }\n  };\n  const onChangeName = e => setFormData({\n    ...formData,\n    user_name: e.target.value\n  });\n  const onChangeDrinks = e => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let updatedDrinks = [...formData.selected_drinks];\n    if (checked && !updatedDrinks.includes(value)) {\n      updatedDrinks.push(value);\n    } else {\n      updatedDrinks = updatedDrinks.filter(product => product !== value);\n    }\n    setFormData({\n      ...formData,\n      selected_drinks: updatedDrinks\n    });\n  };\n  const onChangeAttendingStatus = e => setFormData({\n    ...formData,\n    attending_wedding: e.target.value\n  });\n  const onChangeTransferStatus = e => setFormData({\n    ...formData,\n    transfer: e.target.value\n  });\n  const sendMsg = data => {\n    const body = {\n      chat_id: CHAT_ID,\n      parse_mode: \"Markdown\",\n      text: `*Данные гостя:*\\n${data.user_name}\\n*Присутствие на свадьбе:*\\n${data.attending_wedding}\\n*Нужен ли трансфер:*\\n${data.transfer}\\n*Предпочитаемый алкоголь:*\\n${data.selected_drinks.join(\", \")}`\n    };\n    fetch(uriRequest, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(response => {\n      if (response.ok) {\n        console.log(\"Сообщение успешно отправлено в телеграм\");\n        setSendError(false); // Сбросить ошибку отправки\n      } else {\n        setSendError(true); // Ошибка отправки формы\n        console.error(\"Ошибка отправки сообщения в телеграм:\", response.statusText);\n      }\n    }).catch(error => {\n      console.error(\"Ошибка отправки сообщения в телеграм:\", error);\n    });\n  };\n  return {\n    name: formData.user_name,\n    selectedDrinks: formData.selected_drinks,\n    attendingWedding: formData.attending_wedding,\n    transferNeed: formData.transfer,\n    onSubmissingForm,\n    onChangeName,\n    onChangeDrinks,\n    onChangeAttendingStatus,\n    onChangeTransferStatus,\n    isSending,\n    success,\n    error,\n    sendError\n  };\n};\n_s(useContactForm, \"gL1EV+EP5/U/r3m9O/RmEhryi4U=\");","map":{"version":3,"names":["useState","postData","TOKEN","CHAT_ID","useContactForm","_s","uriRequest","formData","setFormData","user_name","selected_drinks","attending_wedding","transfer","isSending","setSending","success","setSuccess","error","setError","sendError","setSendError","onSubmissingForm","e","preventDefault","length","JSON","stringify","then","res","console","log","sendMsg","catch","finally","setTimeout","closeButton","document","getElementById","addEventListener","withinBoundaries","target","closest","onChangeName","value","onChangeDrinks","checked","updatedDrinks","includes","push","filter","product","onChangeAttendingStatus","onChangeTransferStatus","data","body","chat_id","parse_mode","text","join","fetch","method","headers","response","ok","statusText","name","selectedDrinks","attendingWedding","transferNeed"],"sources":["/Users/olyamakovchik/Desktop/Monowedding/monowed/src/hooks/useContactForm.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport React from \"react\";\nimport { postData } from \"../services/sendDataForm\";\n\nconst TOKEN = \"6427393697:AAFM6wFXAv7O-5jLKH85LGkWSATFMZgNS_8\"; // токен от BotFather\nconst CHAT_ID = \"-1002144356202\"; // chat_id для телеграм\n\nexport const useContactForm = () => {\n  const uriRequest = \"https://api.telegram.org/bot\" + TOKEN + \"/sendMessage\";\n  const [formData, setFormData] = useState({\n    user_name: \"\",\n    selected_drinks: [] as string[],\n    attending_wedding: \"\",\n    transfer: \"\",\n  });\n  const [isSending, setSending] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [sendError, setSendError] = useState(false);\n\n  const onSubmissingForm = function (e: any) {\n    e.preventDefault();\n\n    if (\n      formData.user_name !== \"\" &&\n      formData.selected_drinks.length > 0 &&\n      formData.attending_wedding !== \"\" &&\n      formData.transfer !== \"\"\n    ) {\n      setSending(true);\n\n      postData(uriRequest, JSON.stringify(formData))\n        .then((res) => {\n          setSuccess(true);\n          console.log(res);\n          sendMsg(formData);\n          setSendError(false); // Сбросить ошибку отправки\n        })\n        .catch((e) => {\n          setError(true); // Ошибка заполнения всех полей\n          setSendError(true); // Ошибка отправки формы\n          console.error(e);\n        })\n        .finally(() => {\n          setFormData({\n            user_name: \"\",\n            selected_drinks: [],\n            attending_wedding: \"\",\n            transfer: \"\",\n          });\n          setSending(false);\n\n          setTimeout(() => {\n            setSuccess(false);\n            setError(false);\n            setSendError(false);\n          }, 5000);\n          const closeButton = document.getElementById(\"closebtn\");\nif (closeButton !== null) {\n  // Выполнить операции с closeButton\n  // Например, добавить обработчик события\n  closeButton.addEventListener(\"click\", function () {\n    setSuccess(false);\n    setSendError(false);\n  });\n} else {\n  // В случае, если closeButton равен null\n  console.error(\"Button not found\");\n}\n\ndocument.addEventListener(\"click\", (e: any) => {\n  const withinBoundaries = e.target.closest(\"#message\"); // Проверяем, что клик был внутри сообщения\n\n  if (!withinBoundaries) {\n    setSuccess(false);\n    setSendError(false);\n  }\n});\n          \n        });\n    } else {\n      setError(true);\n      console.error(\"Ошибка: не все поля формы заполнены\");\n    }\n  };\n\n  const onChangeName = (e: any) =>\n    setFormData({ ...formData, user_name: e.target.value });\n  const onChangeDrinks = (e: any) => {\n    const { value, checked } = e.target;\n    let updatedDrinks = [...formData.selected_drinks];\n\n    if (checked && !updatedDrinks.includes(value)) {\n      updatedDrinks.push(value);\n    } else {\n      updatedDrinks = updatedDrinks.filter((product) => product !== value);\n    }\n\n    setFormData({ ...formData, selected_drinks: updatedDrinks });\n  };\n\n  const onChangeAttendingStatus = (e: any) =>\n    setFormData({ ...formData, attending_wedding: e.target.value });\n\n  const onChangeTransferStatus = (e: any) =>\n    setFormData({ ...formData, transfer: e.target.value });\n\n  const sendMsg = (data: any) => {\n    const body = {\n      chat_id: CHAT_ID,\n      parse_mode: \"Markdown\",\n      text: `*Данные гостя:*\\n${data.user_name}\\n*Присутствие на свадьбе:*\\n${\n        data.attending_wedding\n      }\\n*Нужен ли трансфер:*\\n${\n        data.transfer\n      }\\n*Предпочитаемый алкоголь:*\\n${data.selected_drinks.join(\", \")}`,\n    };\n\n    fetch(uriRequest, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => {\n        if (response.ok) {\n          console.log(\"Сообщение успешно отправлено в телеграм\");\n          setSendError(false); // Сбросить ошибку отправки\n        } else {\n          setSendError(true); // Ошибка отправки формы\n          console.error(\n            \"Ошибка отправки сообщения в телеграм:\",\n            response.statusText\n          );\n        }\n      })\n      .catch((error) => {\n        console.error(\"Ошибка отправки сообщения в телеграм:\", error);\n      });\n  };\n\n  return {\n    name: formData.user_name,\n    selectedDrinks: formData.selected_drinks,\n    attendingWedding: formData.attending_wedding,\n    transferNeed: formData.transfer,\n    onSubmissingForm,\n    onChangeName,\n    onChangeDrinks,\n    onChangeAttendingStatus,\n    onChangeTransferStatus,\n    isSending,\n    success,\n    error,\n    sendError,\n  };\n};\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}